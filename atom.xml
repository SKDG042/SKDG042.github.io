<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>_042的小破站♪</title>
  
  
  <link href="https://skdg042.github.io/atom.xml" rel="self"/>
  
  <link href="https://skdg042.github.io/"/>
  <updated>2025-04-26T14:58:41.930Z</updated>
  <id>https://skdg042.github.io/</id>
  
  <author>
    <name>_042</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简述Go中的Context</title>
    <link href="https://skdg042.github.io/posts/7d957a1f.html"/>
    <id>https://skdg042.github.io/posts/7d957a1f.html</id>
    <published>2025-04-26T20:26:14.000Z</published>
    <updated>2025-04-26T14:58:41.930Z</updated>
    
    <content type="html"><![CDATA[<h1>简述 Go 中的 Context</h1><div class="note info flat"><p>起因是笔者对业务代码中频繁出现的 ctx,context.Context,context.background()的不解，但又因为太懒加摆烂一直没有深究，故今天在此处认真恶补一下</p></div><span id="more"></span><h2 id="简要介绍">简要介绍</h2><p>Context 字面义上下文</p><p>在 Go 中，Context 是一个接口,其可以控制 goroutine 生命周期与关闭，同时也可以作为一个传递上下文的工具，将需要的键值对通过 Context.Value 储存并传递</p><details class="folding-tag" ><summary> Context的定义 </summary>              <div class='content'>              <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span>&#123;</span><br><span class="line">    Done() &lt;- <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    Err() <span class="type">error</span></span><br><span class="line"></span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    Value(key any) any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>让我们依次来查看这些定义：</p><div class="tabs" id="context接口方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#context接口方法-1">Done方法</button></li><li class="tab"><button type="button" data-href="#context接口方法-2">Err方法</button></li><li class="tab"><button type="button" data-href="#context接口方法-3">Deadline方法</button></li><li class="tab"><button type="button" data-href="#context接口方法-4">Value方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="context接口方法-1"><ol><li>Done() &lt;- chan struct{}</li></ol><p>​ Done()方法通过返回一个只读通道来判断 Context 是否有效,如果通道关闭，则 Context 失效</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="context接口方法-2"><ol start="2"><li>Err() error</li></ol><p>​ 返回 Context 被取消的原因</p><div class="note warning flat"><blockquote><p><em>Canceled：</em> 上下文被取消</p><p>*DeadlineExceeded：*上下文截止时间已到</p></blockquote></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="context接口方法-3"><ol start="3"><li><p>Deadline() (deadline time.Time, ok bool)</p><p>返回设置的截止时间，如果未设置 Context 的截止时间，则 ok 为 false</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="context接口方法-4"><p><span id="value-method"></span> 4. Value(key interface{}) interface{}</p><p>​ 返回与键关联的值</p><p>​ 可以近似看成一个树状 map 的键值对储存系统，具有层次，当前 context 查询不到所需键时就会自动向上递归,且仅支持修改当前 context</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Context-的创建方法">Context 的创建方法</h2><div class="note quote flat"><p>从上面的 <a class="btn-beautify outline blue" href="#value-method"   title="Value 方法"><i class="fas fa-arrow-circle-up"></i><span>Value 方法</span></a> 介绍中我们可以看到，Context 是树状结构，自动向上递归查询键值，因此必然存在一个根 Context</p></div><p>接下来阐述如何创建一个空的根 Context</p><div class="tabs" id="context创建方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#context创建方法-1">根Context</button></li><li class="tab"><button type="button" data-href="#context创建方法-2">可取消Context</button></li><li class="tab"><button type="button" data-href="#context创建方法-3">定时Context</button></li><li class="tab"><button type="button" data-href="#context创建方法-4">携带值Context</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="context创建方法-1"><ol><li><h4 id="context-Background">context.Background()</h4></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx := context.Background()</span><br></pre></td></tr></table></figure><p>​ 如此，ctx 便是一个空的根 Context,其永不取消，也没有截止时间</p><ol start="2"><li><h4 id="context-TODO">context.TODO()</h4></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx := context.Background()</span><br></pre></td></tr></table></figure><p>值得一提的是 Background 和 TODO 二者完全相同，唯一的区别是 TODO 在语义上的表达是暂不清楚如何正确在此处使用 Context，作为标记后续需要被替换成正确的 Context</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="context创建方法-2"><ol start="3"><li><h4 id="可取消的-Context-cancelCtx">可取消的 Context - cancelCtx</h4></li></ol><p>​ context.WithCancel(parentCtx)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx,cancel := context.WithCancel(parentCtx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用cancel函数以取消context</span></span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br></pre></td></tr></table></figure><div class="note success flat"><p>调用 context.WithCancel 会返回一个子 context 以及取消 cancel 的函数</p><p>可取消的 Context 允许我们通过返回的 cancel 函数手动取消 Context，同时也可以通过取消父 Context 自动取消所有子 Context</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="context创建方法-3"><ol start="4"><li><h4 id="定时取消的-Context-timerCtx">定时取消的 Context - timerCtx</h4></li></ol><p>​ 有两种类型的 timerCtx</p><pre><code>1.  在指定的截止时间取消</code></pre><p>​ context.WithDeadline()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithDeadline(ParentCtx, time.Data(<span class="number">2024</span>,<span class="number">12</span>,<span class="number">27</span>,<span class="number">42</span>,<span class="number">42</span>,<span class="number">42</span>,<span class="number">42</span>,UTC))</span><br><span class="line"><span class="comment">// 创造一个在data取消的Context,参数依次为 年，月，日，时，分，秒，纳秒，时区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br></pre></td></tr></table></figure><ol start="2"><li>在指定持续时间后结束</li></ol><p>​ context.WithTimeout()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在指定持续时间后取消</span></span><br><span class="line">ctx, cancel := context.WithTimeout(parentCtx, <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="context创建方法-4"><ol start="5"><li><h4 id="携带值的-Context-ValueCtx">携带值的 Context - ValueCtx</h4></li></ol><p>​ context.WithValue()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建携带值的Context</span></span><br><span class="line">ctx := context.WithValue(parentCtx, Key, Value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过key获取对应的值</span></span><br><span class="line">value := ctx.Value(Key)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="浅入-Context-机制">浅入 Context 机制</h2><div class="note info flat"><p>Context 机制是 Go 语言实现请求取消、超时控制和跨 API 边界传值的重要组件</p></div><div class="tabs" id="context机制详解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#context机制详解-1">Context树结构</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="context机制详解-1"><ol><li><h4 id="context-树">context 树</h4><p>Context 是以树形结构组织的：</p></li></ol><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TDA[Background] --&gt; B[WithValue]A --&gt; C[WithCancel]B --&gt; D[WithTimeout]C --&gt; E[WithValue]  </pre></div><pre><code>- 每个Context都可以有多个子Context- 当父Context取消时，其所有子Context都会被取消- 子Context的取消不会影响父Context及其他兄弟Context<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       Background</span><br><span class="line">          /  <span class="string">\</span></span><br><span class="line">     WithValue WithCancel</span><br><span class="line">        /        <span class="string">\</span></span><br><span class="line">WithTimeout     WithValue</span><br></pre></td></tr></table></figure></code></pre><div class="note warning flat"><p>总而言之，父影响子而子不影响父</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>TODO :</p><a class="btn-beautify larger" href="https://pkg.go.dev/context"   title="Go官方Context文档"><i class="far fa-hand-point-right"></i><span>Go官方Context文档</span></a>]]></content>
    
    
    <summary type="html">浅谈Go中的Context</summary>
    
    
    
    <category term="Go" scheme="https://skdg042.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://skdg042.github.io/tags/Go/"/>
    
    <category term="Context" scheme="https://skdg042.github.io/tags/Context/"/>
    
  </entry>
  
</feed>
